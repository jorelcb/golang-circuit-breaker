# Nombre del Workflow que aparecer치 en la pesta침a "Actions" de GitHub
name: Create Release

# Define cu치ndo se ejecutar치 el workflow
on:
  push:
    tags:
      - 'v*' # Se activa con tags que comiencen con 'v', por ejemplo: v1.0, v2.0.1, v0.3.0-alpha

# Define los trabajos (jobs) que se ejecutar치n como parte del workflow
jobs:
  build_and_release: # Nombre del job
    name: Create Release # Nombre descriptivo del job que se muestra en la UI de GitHub
    runs-on: ubuntu-latest # Especifica que el job se ejecutar치 en la 칰ltima versi칩n de Ubuntu disponible

    # Pasos que se ejecutar치n secuencialmente dentro del job
    steps:
      # Paso 1: Checkout del c칩digo del repositorio
      # Esta acci칩n descarga el c칩digo fuente en el runner para que el workflow pueda acceder a 칠l.
      - name: Checkout code
        uses: actions/checkout@v4 # Utiliza la acci칩n oficial de GitHub para checkout
        with:
          # 'fetch-depth: 0' asegura que se descargue todo el historial de commits y tags.
          # Esto es importante si planeas generar notas de release basadas en el historial de commits.
          fetch-depth: 0

      # Paso 2: Crear la Release en GitHub
      # Utiliza la acci칩n 'actions/create-release' para crear una nueva release.
      - name: Create Release
        id: create_release # Asigna un ID a este paso para poder referenciar sus salidas (outputs)
        uses: actions/create-release@v1
        env:
          # GITHUB_TOKEN es un token secreto especial proporcionado por GitHub Actions.
          # Se utiliza para autenticar las solicitudes a la API de GitHub en nombre del workflow.
          # No necesitas crear este secreto manualmente; GitHub lo proporciona autom치ticamente.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: El nombre del tag que activ칩 el workflow.
          # ${{ github.ref_name }} es una variable de contexto que contiene el nombre del tag o rama.
          tag_name: ${{ github.ref_name }}

          # release_name: El t칤tulo de la release que se mostrar치 en GitHub.
          # Aqu칤 se usa el nombre del tag como parte del t칤tulo.
          release_name: Release ${{ github.ref_name }}

          # body: El contenido o descripci칩n de la release.
          # Puedes escribir texto est치tico, usar variables de GitHub, o generar esta secci칩n din치micamente.
          # Ejemplo de cuerpo de release m치s detallado:
          # body: |
          #   ## 游꿀 Nueva Release: ${{ github.ref_name }} 游꿀
          #
          #   Consulta los cambios completos en el [changelog](CHANGELOG.md) (si tienes uno).
          #
          #   **Mensaje del tag (si existe):**
          #   ${{ github.event.head_commit.message }}
          #
          #   Para generar notas de release autom치ticamente basadas en commits, considera
          #   usar acciones como 'release-drafter/release-drafter' o
          #   'anton-bondarev/automatic-relases'.
          body: |
            Nueva release ${{ github.ref_name }} ha sido publicada.
            *(Puedes personalizar este mensaje o usar una acci칩n para generar un changelog detallado aqu칤)*

          # draft: Si se establece en 'true', la release se crear치 como un borrador (draft)
          # y no se publicar치 inmediatamente. Deber치s publicarla manualmente desde la UI de GitHub.
          # Por defecto es 'false'.
          draft: false

          # prerelease: Si se establece en 'true', marca la release como una "pre-release".
          # 칔til para versiones alfa, beta, RC, etc.
          # Por defecto es 'false'.
          prerelease: false # Cambia a true si, por ejemplo, el tag incluye '-beta', '-alpha', etc.

      # --- Opcional: Subir artefactos a la Release ---
      # Si tu proceso de build genera artefactos (ej. binarios compilados, archivos .zip, .jar, .whl),
      # puedes subirlos a la release creada.
      # Primero, necesitar칤as un paso para construir/empaquetar tus artefactos. Ejemplo:
      # - name: Build project (ejemplo)
      #   run: |
      #     npm install
      #     npm run build
      #     # Suponiendo que esto crea un archivo ./dist/my-library.zip

      # - name: Upload Release Asset (ejemplo)
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     # upload_url se obtiene de la salida del paso 'create_release'.
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     # asset_path: Ruta al archivo que quieres subir.
      #     asset_path: ./dist/my-library.zip # Cambia esto a la ruta de tu artefacto
      #     # asset_name: Nombre que tendr치 el archivo en la release de GitHub.
      #     asset_name: my-library-${{ github.ref_name }}.zip # Ejemplo de nombre din치mico
      #     # asset_content_type: El tipo MIME del archivo.
      #     asset_content_type: application/zip

      # --- Opcional: Generar Notas de Release Autom치ticamente ---
      # Puedes usar herramientas como Release Drafter o conventional-changelog para generar
      # notas de release m치s ricas basadas en tus commits.
      # Ejemplo usando Release Drafter (requiere configuraci칩n adicional):
      # - name: Draft Release Notes
      #   uses: release-drafter/release-drafter@v6 # O la versi칩n m치s reciente
      #   with:
      #     # publish: true # Si quieres que publique directamente la release que draft칩
      #     # config-name: release-drafter.yml # Si tienes un archivo de configuraci칩n para Release Drafter
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
